{"version":3,"sources":["bg.png","ListGroupItem.js","ListGroup.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListGroupItem","person","active","onClick","className","style","cursor","color","display","xmlns","width","height","viewBox","id","data-name","transform","d","fill","fontFamily","name","company","phone","ListGroup","people","overflowY","map","p","i","Fragment","key","length","Map","position","latitude","lat","longitude","lng","zoom","mapboxApiAccessToken","mapStyle","offsetLeft","offsetTop","backgroundColor","fontSize","letterSpacing","marginLeft","marginRight","App","useState","search","setSearch","data","setPeople","setActive","filterPeople","input","filter","toLowerCase","includes","type","placeholder","value","onChange","e","target","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87fb33bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.7dc0a743.png\";","import React from 'react';\n\nconst ListGroupItem = ({person, active, onClick}) => {\n    return (\n        <li className=\"d-flex\" style={{cursor: 'pointer'}} onClick={() => onClick(person)}>\n            <div className=\"d-flex flex-column align-items-center pt-2 px-4\">\n                <h6 style={{color: '#707070', display: 'inline'}} className=\"text-center\">{5}km</h6>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"45.714\" height=\"40\" viewBox=\"0 0 45.714 40\">\n                    <g id=\"Group_3\" data-name=\"Group 3\" transform=\"translate(-131 -1368)\">\n                        <path id=\"Polygon_3\" data-name=\"Polygon 3\" d=\"M22.857,0,45.714,40H0Z\" transform=\"translate(176.714 1408) rotate(180)\" fill={person.id === active.id ? '#edc1c1' : \"#c3c3c3\"}/>\n                    </g>\n                </svg>\n            </div>\n            <div>\n                <h2 style={{fontFamily: \"'Times New Roman', Times, serif\", color: '#707070'}}>{person.name}</h2>\n                <h6 style={{color: '#707070'}}>{person.company}</h6>\n                <h6 style={{color: '#707070'}}>{person.phone}</h6>\n            </div>\n        </li>\n    )\n}\n\nexport default ListGroupItem;","import React from 'react';\nimport ListGroupItem from './ListGroupItem';\n\nconst ListGroup = ({people, active, onClick}) => {\n    return (\n        <ul className=\"list-unstyled\" style={{height: 800, overflowY: 'scroll'}}>\n            {people.map((p, i) => (\n                <React.Fragment key={i}>\n                    <ListGroupItem person={p} active={active} onClick={onClick}/>\n                    {i < people.length -1 && <hr style={{width: '75%'}}/>}\n                </React.Fragment>\n            ))}\n        </ul>\n    );\n}\n\nexport default ListGroup;","import React from 'react';\nimport ReactMapGL, {Marker} from 'react-map-gl';\n\nconst GOOGE_API_KEY = \"pk.eyJ1IjoicmlrYXJkLWFsdGVuIiwiYSI6ImNqb3NjcG96ZTAwenkzcXIyMHRocHpmdjkifQ.6AG0Hq2sond7fbjkXdnqRw\";\n\nconst Map = ({position, name}) => (\n    <ReactMapGL\n        width=\"100%\"\n        height={800}\n        latitude={position.lat}\n        longitude={position.lng}\n        zoom={14}\n        mapboxApiAccessToken={GOOGE_API_KEY}\n        mapStyle=\"mapbox://styles/rikard-alten/cjzsb6nm204zi1clh90xbek1w\"\n        \n    >\n        <Marker\n            latitude={position.lat}\n            longitude={position.lng}\n            offsetLeft={-45}\n            offsetTop={-40}\n        >\n            <p style={{backgroundColor: '#edc1c1', color: '#ffffff', fontFamily: \"'Times New Roman', Times, serif\", fontSize: 20, letterSpacing: 5, marginLeft: '-50%', marginRight: '50%'}} className=\"p-2\">{name}</p>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"45.714\" height=\"40\" viewBox=\"0 0 45.714 40\">\n                <g id=\"Group_3\" data-name=\"Group 3\" transform=\"translate(-131 -1368)\">\n                    <path id=\"Polygon_3\" data-name=\"Polygon 3\" d=\"M22.857,0,45.714,40H0Z\" transform=\"translate(176.714 1408) rotate(180)\" fill='#edc1c1'/>\n                </g>\n            </svg>\n        </Marker>\n    </ReactMapGL>\n);\n\nexport default Map;","import React, {useState} from 'react';\nimport './App.css';\nimport data from './data.json';\nimport ListGroup from './ListGroup';\nimport Map from './Map';\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [people, setPeople] = useState(data);\n  const [active, setActive] = useState(data[0]);\n\n  const handleSearch = e => {\n    setSearch(e.target.value);\n    filterPeople(e.target.value);\n  }\n\n  const filterPeople = input => {\n    if(input.length > 0) {\n      setPeople(data.filter(p => p.name.toLowerCase().includes(input.toLowerCase())));\n    } else {\n      setPeople(data);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Notarius<br/>Publicus\n      </h1>\n      <div className=\"textfield-wrapper\">\n        <input type=\"text\" placeholder=\"SÃ¶k\" className=\"form-control-lg textfield\" value={search} onChange={handleSearch} />\n      </div>\n      <div className=\"container-fluid\" style={{marginTop: 200}}>\n        <div className=\"row\">\n          <div className=\"col-5 px-5\">\n            <ListGroup people={people} active={active} onClick={setActive}/>\n          </div>\n          <div className=\"col-7 mb-5\">\n            {active && <Map position={active.position} name={active.name}/>}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport bg from './bg.png';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}